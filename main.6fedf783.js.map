{"version":3,"sources":["scripts/main.js"],"names":["url","countOfMessages","printMessage","message","textElement","document","createElement","className","innerText","style","top","body","append","createList","phonesName","list","phoneName","li","innerHTML","name","getPhones","Promise","resolve","reject","fetch","then","response","ok","setTimeout","Error","json","details","getPhonesDetails","arrayIds","all","map","id","result","arrayPhonesId","phone","catch","error"],"mappings":";AAAA,aAgEA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9DA,IAAMA,EACJ,wEAGEC,EAAkB,EAEhBC,EAAe,SAACC,GACdC,IAAAA,EAAcC,SAASC,cAAc,OAE3CF,EAAYG,UAAY,UACxBH,EAAYI,UAAYL,EACxBC,EAAYK,MAAMC,IAAM,GAAuB,IAAlBT,EAAwB,KACrDA,IACAI,SAASM,KAAKC,OAAOR,IAGjBS,EAAa,SAACC,GACZC,IAD2B,EAC3BA,EAAOV,SAASC,cAAc,MAEZQ,EAAAA,EAAAA,GAHS,IAGG,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAzBE,IAAAA,EAAyB,EAAA,MAC5BC,EAAKZ,SAASC,cAAc,MAElCW,EAAGC,UAAYhB,EAAac,EAAUG,MACtCJ,EAAKH,OAAOK,IAPmB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAW7BG,EAAY,WACT,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAASxB,GAAAA,OAAAA,IACNyB,KAAK,SAAAC,GAKGA,OAJFA,EAASC,IACZC,WAAW,WAAML,OAAAA,EAAO,IAAIM,MAAM,SAAU,OAGvCH,EAASI,SAEjBL,KAAK,SAAAC,GACGJ,OAAAA,EAAQI,QAKjBK,EACJ,mEAGIC,EAAmB,SAACC,GACjBZ,OAAAA,QAAQa,IAAID,EAASE,IAAI,SAACC,GACxB,OAAA,IAAIf,QAAQ,SAACC,EAASC,GAC3BC,MAASO,GAAAA,OAAAA,EAAWK,KAAAA,OAAAA,EAApB,UACGX,KAAK,SAACC,GACD,OAACA,EAASC,GAIPL,EAAQI,EAASI,QAHfP,EAAO,IAAIM,MAAM,kBASpCT,IACGK,KAAK,SAACY,GACLxB,EAAWwB,GAELC,IAAAA,EAAgBD,EAAOF,IAAI,SAACI,GACzBA,OAAAA,EAAMH,KAGfJ,EAAiBM,GACdb,KAAK,SAACH,GAAYA,OAAAA,IAClBkB,MAAM,SAACC,GAAWA,OAAAA,MAEtBD,MAAM,SAACC,GACN5B,EAAW4B","file":"main.6fedf783.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst url = `${\n  'https://mate-academy.github.io/phone-catalogue-static/api/phones.json'\n}`;\n\nlet countOfMessages = 0;\n\nconst printMessage = (message) => {\n  const textElement = document.createElement('div');\n\n  textElement.className = 'message';\n  textElement.innerText = message;\n  textElement.style.top = 10 + countOfMessages * 100 + 'px';\n  countOfMessages++;\n  document.body.append(textElement);\n};\n\nconst createList = (phonesName) => {\n  const list = document.createElement('ul');\n\n  for (const phoneName of phonesName) {\n    const li = document.createElement('li');\n\n    li.innerHTML = printMessage(phoneName.name);\n    list.append(li);\n  }\n};\n\nconst getPhones = () => {\n  return new Promise((resolve, reject) => {\n    fetch(`${url}`)\n      .then(response => {\n        if (!response.ok) {\n          setTimeout(() => reject(new Error('Error'), 5000));\n        }\n\n        return response.json();\n      })\n      .then(response => {\n        return resolve(response);\n      });\n  });\n};\n\nconst details = `${\n  'https://mate-academy.github.io/phone-catalogue-static/api/phones'\n}`;\n\nconst getPhonesDetails = (arrayIds) => {\n  return Promise.all(arrayIds.map((id) => {\n    return new Promise((resolve, reject) => {\n      fetch(`${details}/${id}.json`)\n        .then((response) => {\n          if (!response.ok) {\n            return reject(new Error('Error'));\n          }\n\n          return resolve(response.json());\n        });\n    });\n  }));\n};\n\ngetPhones()\n  .then((result) => {\n    createList(result);\n\n    const arrayPhonesId = result.map((phone) => {\n      return phone.id;\n    });\n\n    getPhonesDetails(arrayPhonesId)\n      .then((resolve) => resolve)\n      .catch((error) => (error));\n  })\n  .catch((error) => {\n    createList(error);\n  });\n"]}